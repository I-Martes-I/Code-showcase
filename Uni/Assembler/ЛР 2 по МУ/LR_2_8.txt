            AREA    DATA, DATA, READWRITE 
            AREA    PROGRAM, CODE, READONLY     	
            ENTRY                               	
            ALIGN                               

Reset_Handler
            LDR  R0, =0x20000000    
            LDR  R2, =0                     ; счетчик элементов исходного массива
			LDR	 R5, =0x20000040	
			LDR  R6, =0                     ; счетчик элементов, удовлетворяющих требованию

			LDR R4, =0x00A1		
			REV16 R4, R4
			STRH R4,[R0]
			
			LDR R4, =0x803A		
			REV16 R4, R4
			STRH R4,[R0, #2]
			
			LDR R4, =0x0012		
			REV16 R4, R4
			STRH R4,[R0, #4]
			
			LDR R4, =0x804B		
			REV16 R4, R4
			STRH R4,[R0, #6]
			
			LDR R4, =0x81C5		
			REV16 R4, R4
			STRH R4,[R0, #8]
			
			LDR R4, =0x006D		
			REV16 R4, R4
			STRH R4,[R0, #10]
			
			LDR R4, =0x8020		
			REV16 R4, R4
			STRH R4,[R0, #12]
			
			LDR R4, =0x0812		
			REV16 R4, R4
			STRH R4,[R0, #14]
			
			LDR R4, =0x00F0		
			REV16 R4, R4
			STRH R4,[R0, #16]
			
			LDR R4, =0x8010		
			REV16 R4, R4
			STRH R4,[R0, #18]
			
			LDR  R4, =0              
LOOP
			CMP R2, #10
			BEQ Stop
			LDRH R1, [R0]
			REV16 R1, R1
			ADDS R0, R0, #2
			ADDS R2, R2, #1
			LDR  R3, =0x8000        ; маска знака
			MOV R7, R1              ; копируем текущее число в R7                 
			TST R1, R3              ; проверяем, число положительное или отрицательное
			BEQ EVEN                ; переходим по метке, если число положительное
			EORS R1, R3             ; иначе получаем модуль отрицательного числа
EVEN
			LDR  R3, =0x01          ; маска для проверки четности
			TST R1, R3              ; проверяем, число четное или нечетное
			BNE LOOP                ; переходим по метке, если число нечетное
			CMP R1, #32             ; проверяем, число (или модуль числа) меньше/равно 32 или больше 32
			BHI LOOP                ; переходим по метке, если число (или модуль числа) больше 32
			ADDS R6, R6, #1         ; увеличиваем счетчик элементов, удовлетворяющих требованию
			LDR  R3, =0x8000        ; маска знака
			TST R7, R3              ; проверяем скопированный элемент: он отрицательный или положительный?
			BEQ ARR_Y               ; переходим по метке, если элемент положительный
			ORRS R1, R3             ; иначе возвращаем знак модулю отрицательного числа
ARR_Y
			REV16 R6, R6
			STRH R6, [R5]           ; копируем число элементов в адрес регистра R5
			REV16 R6, R6
			ADDS R4, R4, #2          
			REV16 R1, R1
			STRH R1, [R5, R4]       ; копируем элемент в новый массив
			B LOOP


Stop
            B      Stop    		

            AREA    RESET, DATA, READONLY ; ???????? ?? ???????????? ???????? ??????????
            EXPORT  Vectors         ; ??????? ????? Vectors ??? ????????????
Vectors
            DCD     0x20004000      ; ?????? ????? (????????? ????? ???)
            DCD     Reset_Handler   ; ?????? ?????? (?????? ?????????)

            END  